name: Packer Build

on:
    push:
      branches:
        - main

env:
  DEPLOYMENT_ENV: ${{secrets.ENV}}

jobs:
  packer-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.1'

      - name: Install dependencies
        run: go get .

      - name: Build Go binary
        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o webapp main.go

      - name: Copy Go binary to Packer directory
        run: |
          rm -f ./packer/webapp
          cp ./webapp ./packer/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup packer
        uses: hashicorp/setup-packer@main
        id: setup

      - name: Run packer init
        id: init
        run: "packer init ./packer/packer.pkr.hcl"

      - name: Build Packer image
        run: |
          cd ./packer
          packer build \
            -var profile=${{ secrets.AWS_PROFILE }} \
            -var region=${{ secrets.AWS_REGION }} \
            -var source_ami=${{ secrets.SOURCE_AMI }} \
            -var ami_name="${{ secrets.AMI_NAME }}-$(date +'%Y%m%d%H%M%S')" \
            -var instance_type=${{ secrets.INSTANCE_TYPE }} \
            -var subnet_id=${{ secrets.SUBNET_ID }} \
            -var ssh_username=${{ secrets.SSH_USERNAME }} \
            -var 'ami_users=[${{ secrets.DEMO_ACCOUNT_ID }}]' \
            packer.pkr.hcl

  deploy:
    runs-on: ubuntu-latest
    needs: packer-build

    steps:
      - name: Configure AWS Credentials for Target Environment
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets[env.DEPLOYMENT_ENV | upper | append: '_AWS_ACCESS_KEY_ID'] }}
          aws-secret-access-key: ${{ secrets[env.DEPLOYMENT_ENV | upper | append: '_AWS_SECRET_ACCESS_KEY'] }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build Launch Template and Perform Instance Refresh
        run: |
          AMI_ID=$(aws ec2 describe-images --filters "Name=name,Values=webapp-ami*" --query 'reverse(sort_by(Images, &CreationDate))[:1].ImageId' --output text)
          webappLT_latest_version=$(aws ec2 describe-launch-template-versions --launch-template-name ${{secrets.LT_NAME}} --query 'reverse(sort_by(LaunchTemplateVersions, &VersionNumber))[0].VersionNumber')
          
          echo "Creating new launch template version..."
          aws ec2 create-launch-template-version \
            --launch-template-name "${{secrets.LT_NAME}}" \
            --source-version "$webappLT_latest_version" \
            --launch-template-data '{"ImageId":"'"$AMI_ID"'"}'

          echo "Starting instance refresh..."
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "${{secrets.ASG_NAME}}" \
            --strategy Rolling \
            --preferences '{"MinHealthyPercentage":100,"InstanceWarmup":150}'
